* Screenshots
  #+CAPTION: Running dired at the same time
  #+NAME: Runing Dired
  [[./screenshots/run_dired.png]]

  #+CAPTION: With dired-subtree
  #+NAME: With Dired Subtree
  [[./screenshots/with_dired_subtree.png]]
* Installation
** Melpa
   #+begin_src emacs-lisp :tangle yes
  ;; I recommend using use-package.
  ;; https://github.com/jwiegley/use-package
(use-package dired-subtree
  :ensure t
  :commands (dired-subtree-toggle dired-subtree-cycle)
  :config
  (setq dired-subtree-use-backgrounds nil))

(use-package dired-sidebar
  :ensure t
  :commands (dired-sidebar-toggle-sidebar)
  :config
  (use-package all-the-icons-dired
    ;; M-x all-the-icons-install-fonts
    :ensure t
    :commands (all-the-icons-dired-mode)))
   #+end_src
** Minimal Bootstrap using Git
   #+begin_src sh :tangle yes
   git clone https://github.com/jojojames/dired-sidebar
   cd dired-sidebar
   pwd # [Put this in load path.]
   #+end_src

   Add config to Emacs:
   #+begin_src emacs-lisp :tangle yes
   (add-to-list 'load-path "path from pwd")
   (require 'dired-sidebar)
   M-x dired-sidebar-toggle-sidebar
   #+end_src
* My Settings
  #+begin_src emacs-lisp :tangle yes
(use-package dired-sidebar
  :bind (("C-x C-n" . dired-sidebar-toggle-sidebar))
  :ensure t
  :commands (dired-sidebar-toggle-sidebar)
  :config
  (when (eq system-type 'windows-nt)
    (setq dired-sidebar-use-all-the-icons nil))

  (setq dired-sidebar-use-custom-font t)
  (setq dired-sidebar-face
        (cond
         ((eq system-type 'darwin)
          '(:family "Helvetica" :height 140))
         ((eq system-type 'windows-nt)
          '(:family "Times New Roman" :height 130))
         (:default
          '(:family "Arial" :height 140))))

  (use-package all-the-icons-dired
    ;; M-x all-the-icons-install-fonts
    :ensure t
    :commands (all-the-icons-dired-mode)))

(use-package dired-subtree
  :ensure t
  :commands (dired-subtree-toggle dired-subtree-cycle)
  :config
  (setq dired-subtree-line-prefix "_ ")
  (setq dired-subtree-use-backgrounds nil))

(use-package ace-window
  :ensure t
  :commands (ace-delete-window
             ace-swap-window
             ace-delete-other-windows
             ace-window
             aw-select))
  #+end_src
* Alternatives
  https://github.com/Alexander-Miller/treemacs

  https://github.com/jaypei/emacs-neotree
